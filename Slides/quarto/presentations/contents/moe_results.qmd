# Case Studies

## Stable Switching {auto-animate="true"}

* Given two unstable closed-loop systems

::::{.columns}

:::{.column width=65%}

\begin{align*}
    \dot{x} = A_1x = \begin{bmatrix} 0 & -1 \\ 2 & 0 \end{bmatrix} x, \; \;
    \dot{x} = A_2x = \begin{bmatrix} 0 & -2 \\ 1 & 0 \end{bmatrix} x,
\end{align*}
find stable switching system that converges to $x^*=(0, 0)$

:::{.fragment fragment-index=1}
* Maximum number of state partitions set to 4
:::

:::

:::{.column width=35%}

:::{.fragment fragment-index=0}
![](contents/assets/unstable_switching.png){.absolute top=20 left=700 width="400" height="400"}
:::

:::
::::

:::{.fragment fragment-index=2}
* The gating network $\mathbf{P}(x | \psi)$ is a fully-connected neural net with 4 outputs
* There are 4 experts with parameters $\theta_i$ 
\begin{align*}
    F_i(\theta_i) = \begin{cases}
       0, & \theta_i > \frac{1}{2}, \\
       1, & \theta_i \leq \frac{1}{2},
    \end{cases}
\end{align*}
* **Objective**: learn $(\psi, \theta)$ that minimize the accumulated loss
:::


## Training progress

:::{.r-stack}

:::{.fragment .fade-in-then-out fragment-index=0}
![&nbsp; Control input (purple $\rightarrow \dot{x} = A_1x$, yellow $\rightarrow \dot{x} = A_2 x$) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; State partition ](contents/assets/moeSwitchingIter0.svg){top=100 left=300 }
:::


:::{.fragment .fade-in-then-out fragment-index=1}
![&nbsp; Control input (purple $\rightarrow \dot{x} = A_1x$, yellow $\rightarrow \dot{x} = A_2 x$) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; State partition ](contents/assets/moeSwitchingIter200.svg){ top=50 left=300 }
:::


:::{.fragment .fade-in-then-out fragment-index=2}
![&nbsp; Control input (purple $\rightarrow \dot{x} = A_1x$, yellow $\rightarrow \dot{x} = A_2 x$) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; State partition ](contents/assets/moeSwitchingIter1400.svg){ top=100 left=300 }
:::

:::{.fragment .fade-in fragment-index=3}
![&nbsp; Control input (purple $\rightarrow \dot{x} = A_1x$, yellow $\rightarrow \dot{x} = A_2 x$) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; State partition ](contents/assets/switching_results.svg)
:::

:::

## {background-video="contents/assets/cartpole-firefox.mp4" background-size="contain" background-video-muted="true"}


## Cartpole with wall barriers

<br/>

::::{.columns}

:::{.column width=50%}

:::{.fragment .fade-in fragment-index=1}
* Notice *LQR* fails due to the impact from the wall
* MOE controller training
    + there are three deep-net experts $F_i(x;\theta_i)$
    + the gating network is also a neural net
    + running cost is MTL 
:::
:::

:::{.column width=50%}

:::{.fragment .fade-in fragment-index=0}
{{< video contents/assets/cartpole_oneController.mp4 aspect-ratio="4x3" width="600" >}}
:::

:::
::::


<!-- :::{.fragment .fade-in fragment-index=2}
{{< video contents/assets/moeController.mp4 width="900" height="650" >}}
::: -->



## {background-video="contents/assets/cartpole_hardware.mp4" background-size="contain" background-video-muted="true"}

## Results 

* The contact-aware MOE controller  
    + leverages the impacts from the wall
    + switches to a policy that *rapidly brakes* to assist in the catching process

![](contents/assets/moe_traj_control.jpg){fig-align="center"}


## Conclusions

<br/>
<br/>

:::{.incremental}
* We provide a data-driven control design that *automatically* learns several policies and the necessary switching scheme
* The framework leverages the switching controllers to stabilize the multi-modal dynamical system
* The gating network successsfully parameterizes the control-switching conditionals that achieves the desired performance
:::